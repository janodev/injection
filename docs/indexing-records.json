[{"rawIndexableTextContent":"Returns a description of the instances registered. ","kind":"symbol","title":"debugDescription","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/debugDescription-swift.type.property","interfaceLanguage":"swift"}},"summary":"Returns a description of the instances registered."},{"rawIndexableTextContent":"Returns true if the given type is registered.  Return Value true if the dependency is registered. dependency whose registration is being queried.","kind":"symbol","title":"isRegistered(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/isRegistered(_:)","interfaceLanguage":"swift"}},"summary":"Returns true if the given type is registered."},{"rawIndexableTextContent":"Register an instance.  Discussion If the instance is a reference type it will be treated as a singleton.","kind":"symbol","title":"register(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/register(_:)","interfaceLanguage":"swift"}},"summary":"Register an instance."},{"rawIndexableTextContent":"A wrapper for a closure that creates a new instance per request. ","kind":"symbol","title":"Factory","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Factory","interfaceLanguage":"swift"}},"summary":"A wrapper for a closure that creates a new instance per request."},{"rawIndexableTextContent":"Creates a new instance. ","kind":"symbol","title":"create","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Factory\/create","interfaceLanguage":"swift"}},"summary":"Creates a new instance."},{"rawIndexableTextContent":"Type to inject by this annotation. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Dependency\/wrappedValue","interfaceLanguage":"swift"}},"summary":"Type to inject by this annotation."},{"rawIndexableTextContent":"Unregisters all dependencies ","kind":"symbol","title":"unregisterAll()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/unregisterAll()","interfaceLanguage":"swift"}},"summary":"Unregisters all dependencies"},{"rawIndexableTextContent":"A textual description of the type created, suitable for debugging. ","kind":"symbol","title":"debugDescription","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Factory\/debugDescription","interfaceLanguage":"swift"}},"summary":"A textual description of the type created, suitable for debugging."},{"rawIndexableTextContent":"Creates a value instance and resolves the type. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Dependency\/init()","interfaceLanguage":"swift"}},"summary":"Creates a value instance and resolves the type."},{"rawIndexableTextContent":"A textual description of the instances registered, suitable for debugging. ","kind":"symbol","title":"debugDescription","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/debugDescription-swift.property","interfaceLanguage":"swift"}},"summary":"A textual description of the instances registered, suitable for debugging."},{"rawIndexableTextContent":"Register a factory that returns a new instance per request.  An object that creates a new instance of type T. Discussion Use it to create an intance per request or to create an instance that uses additional dependencies.","kind":"symbol","title":"register(factory:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/register(factory:)","interfaceLanguage":"swift"}},"summary":"Register a factory that returns a new instance per request."},{"rawIndexableTextContent":"Initializes an instance configured instances of type T.  Creates a new instance.","kind":"symbol","title":"init(create:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Factory\/init(create:)","interfaceLanguage":"swift"}},"summary":"Initializes an instance configured instances of type T."},{"rawIndexableTextContent":"A property wrapper that injects the given type.  Overview Usage:  If the type wasn’t registered previously: If it is optional it returns nil. If it is non optional it crashes with preconditionFailure.","kind":"symbol","title":"Dependency","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Dependency","interfaceLanguage":"swift"}},"summary":"A property wrapper that injects the given type."},{"rawIndexableTextContent":"Resolves a dependency previously registered.  Return Value resolved instance. Discussion If the dependency is non optional and the type wasn’t previously registered, it crashes with preconditionFailure.","kind":"symbol","title":"resolve()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer\/resolve()","interfaceLanguage":"swift"}},"summary":"Resolves a dependency previously registered."},{"rawIndexableTextContent":"Dependency container.  Usage Resolution Use an annotation to inject that dependency automatically.  Resolve to an optional type to avoid a crash resolving a dependency not previously registered.  Use a factory to create a new instance during a resolution.  Registration Register a dependency.  Reference types behave as singletons. You can mutate the instance in the dependency container.  Registering a type overwrites any previous registration of the same type.  See pros and cons of annotation injection in Injection.","kind":"symbol","title":"DependencyContainer","headings":["Usage","Resolution","Registration"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/DependencyContainer","interfaceLanguage":"swift"}},"summary":"Dependency container."},{"rawIndexableTextContent":"A minimal dependency container to inject dependencies via property wrapper. Overview Annotations are the shortest initializer pattern. Mind the differences:  Benefits: Less verbose. No need to pass parameters along just to create other objects. Knowledge of dependency creation is kept in the container. Easy to mock by replacing dependencies. Cons: Coupling with the container. Dependencies of an object are are not visible during its creation. Usage See DependencyContainer. Implementation The implementation is three objects and 150 lines. Dependency DependencyContainer Factory ","kind":"symbol","title":"Injection","headings":["Overview","Usage","Implementation"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection","interfaceLanguage":"swift"}},"summary":"A minimal dependency container to inject dependencies via property wrapper."},{"rawIndexableTextContent":"Returns the type created by this factory object. ","kind":"symbol","title":"typeCreated","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Injection\/documentation\/Injection\/Factory\/typeCreated","interfaceLanguage":"swift"}},"summary":"Returns the type created by this factory object."}]